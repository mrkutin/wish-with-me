# Define upstream servers
upstream pwa_servers {
    least_conn;
    server wish-with-me-pwa-1:3001;
    server wish-with-me-pwa-2:3001;
}

upstream api_servers {
    least_conn;
    server wish-with-me-backend-1:3000;
    server wish-with-me-backend-2:3000;
}

# HTTP server - handles both domains
server {
    listen 80;
    listen [::]:80;
    server_name wishwith.me api.wishwith.me;

    # Certbot challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server for wishwith.me (PWA)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name wishwith.me;

    # SSL configuration will be added by certbot
    ssl_certificate /etc/letsencrypt/live/wishwith.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wishwith.me/privkey.pem;

    # Forward to PWA
    location / {
        proxy_pass http://pwa_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# HTTPS server for api.wishwith.me (Backend)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.wishwith.me;

    # SSL configuration will be added by certbot
    ssl_certificate /etc/letsencrypt/live/wishwith.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/wishwith.me/privkey.pem;

    # Forward to Backend
    location / {
        # Longer timeouts for auth requests
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_pass http://api_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
} 